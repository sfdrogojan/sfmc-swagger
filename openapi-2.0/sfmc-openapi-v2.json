{
  "swagger": "2.0",
  "info": {
    "title": "Marketing Cloud REST API",
    "description": "Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.",
    "version": "1.0.0",
    "contact": {
      "name": "MC SDK Team",
      "email": "mc_sdk@salesforce.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "www.exacttargetapis.com",
  "paths": {
    "/asset/v1/content/assets/{id}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "getAssetById",
        "description": "Gets an asset by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "A single asset",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-published": true,
        "operationId": "getAssetById"
      },
      "patch": {
        "tags": [
          "asset"
        ],
        "summary": "patchAsset",
        "description": "Updates part of an asset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset to update",
            "required": true,
            "type": "number"
          },
          {
            "name": "body",
            "in": "body",
            "description": "JSON Parameters",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single asset",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-published": true,
        "operationId": "partiallyUpdateAsset"
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "summary": "deleteAsset",
        "description": "Deletes an asset.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The ID of the asset to delete",
          "required": true,
          "type": "number"
        }],
        "responses": {
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-published": true,
        "operationId": "deleteAssetById"
      }
    },
    "/asset/v1/content/assets": {
      "post": {
        "tags": [
          "asset"
        ],
        "summary": "createAsset",
        "description": "Creates a new asset.",
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "JSON Parameters",
          "schema": {
            "$ref": "#/definitions/Asset"
          }
        }],
        "responses": {
          "200": {
            "description": "A single asset",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-published": true,
        "operationId": "createAsset"
      }
    },
    "/hub/v1/campaigns": {
      "post": {
        "tags": [
          "campaign"
        ],
        "summary": "createCampaign",
        "description": "Creates a campaign.",
        "parameters": [{
          "name": "body",
          "in": "body",
          "description": "JSON Parameters",
          "schema": {
            "$ref": "#/definitions/Campaign"
          }
        }],
        "responses": {
          "200": {
            "description": "A single campaign",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
          }
        },
        "x-md-detail": "createCampaign.htm",
        "x-published": true,
        "operationId": "createCampaign"
      }
    },
    "/hub/v1/campaigns/{id}": {
      "get": {
        "tags": [
          "campaign"
        ],
        "summary": "getCampaign",
        "description": "Retrieves a campaign.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Campaign ID",
          "required": true,
          "type": "number"
        }],
        "responses": {
          "200": {
            "description": "A single campaign",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
    }
  },
        "x-md-detail": "getCampaign.htm",
        "x-published": true,
        "operationId": "getCampaignById"
      },
      "delete": {
        "tags": [
          "campaign"
        ],
        "summary": "deleteCampaign",
        "description": "Deletes a campaign.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The ID of the campaign to delete",
          "required": true,
          "type": "number"
        }],
        "responses": {
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-md-detail": "deleteCampaign.htm",
        "x-published": true,
        "operationId": "deleteCampaignById"
    }
    },
    "/messaging/v1/email/definitions/": {
      "post": {
        "tags": [
          "emailDefinition"
        ],
        "summary": "createEmailDefinition",
        "description": "Creates the definition for an email.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON Parameters",
            "schema": {
              "$ref": "#/definitions/EmailDefinition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A single definition for an email",
            "schema": {
              "$ref": "#/definitions/EmailDefinition"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-md-detail": "createEmailDefinition.htm",
        "x-published": true,
        "operationId": "createEmailDefinition"
      },
      "get":{
        "tags": [
          "emailDefinition"
        ],
        "summary": "getEmailDefinitions",
        "description": "Gets a list of send definitions.",
        "parameters": [{
          "name": "$filter",
          "in": "query",
          "description": "Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq.",
          "required": false,
          "type": "string"
        },
        {
          "name": "$pageSize",
          "in": "query",
          "description": "Number of definitions, which are array elements, to return per paged response.",
          "required": false,
          "type": "number"
        },
        {
          "name": "$page",
          "in": "query",
          "description": "Page number to return.",
          "required": false,
          "type": "number"
        },
        {
          "name": "$orderBy",
          "in": "query",
          "description": "Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status.",
          "required": false,
          "type": "string"
        }
      ],
        "responses":{
          "200": {
            "description": "Email definitions successfully retrieved",
            "schema": {
              "$ref": "#/definitions/EmailDefinitionsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-md-detail": "getEmailDefinitions.htm",
        "x-published": true,
        "operationId": "getEmailDefinitions"
      }
    },"/messaging/v1/email/definitions/{definitionKey}":{
      "delete":{
        "tags": [
          "emailDefinition"
        ],
        "summary": "deleteEmailDefinition",
        "description": "Deletes the definition for an email.",
        "parameters": [{
          "name": "definitionKey",
          "in": "path",
          "description": "Unique identifier of the definition to delete",
          "required": true,
          "type": "string"
        }],
        "responses":{
          "200": {
            "description": "Definition of email successfully deleted",
            "schema": {
              "$ref": "#/definitions/SuccessfulEmailDefinitionDelete"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-md-detail": "deleteEmailDefinition.htm",
        "x-published": true,
        "operationId": "deleteEmailDefinitionByDefinitionKey"
      },
      "patch":{
        "tags": [
          "emailDefinition"
        ],
        "summary": "patchEmailDefinition",
        "description": "Updates a specific email definition.",
        "parameters": [
          {
            "name": "definitionKey",
            "in": "path",
            "description": "Unique identifier of the definition to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "JSON Parameters",
            "schema": {
              "$ref": "#/definitions/EmailDefinitionDescription"
            }
          }
        ],
        "responses":{
          "200": {
            "description": "A single definition for an email",
            "schema": {
              "$ref": "#/definitions/EmailDefinition"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-published": true,
        "operationId": "partiallyUpdateEmailDefinition"
      },
      "get":{
        "tags": [
          "emailDefinition"
        ],
        "summary": "getEmailDefinition",
        "description": "Gets send definition configuration details for a definition key.",
        "parameters": [{
          "name": "definitionKey",
          "in": "path",
          "description": "Unique identifier of the definition to get",
          "required": true,
          "type": "string"
        }],
        "responses":{
          "200": {
            "description": "Definition of email successfully retrieved",
            "schema": {
              "$ref": "#/definitions/EmailDefinition"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Permission error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-md-detail": "getEmailDefinition.htm",
        "x-published": true,
        "operationId": "getEmailDefinitionByDefinitionKey"
      }
    }
  },
  "definitions": {
    "ApiError": {
      "type": "object",
      "properties": {
        "Message": {
          "description": "The error message",
          "type": "string"
        },
        "ErrorCode": {
          "description": "The specific error code",
          "type": "number"
        },
        "Documentation": {
          "description": "Any specific documentation for the error",
          "type": "string"
        }
      }
    },
    "AssetType": {
      "type": "object",
      "description": "The asset type",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "The id of the asset type",
          "type": "number"
        },
        "name": {
          "description": "The name of the asset type",
          "type": "string"
        },
        "displayName": {
          "description": "The description of the asset type",
          "type": "string"
        }
      }
    },
    "Asset": {
      "type": "object",
      "required": [
        "customerKey",
        "name",
        "description",
        "assetType"
      ],
      "properties": {
        "id": {
          "description": "The id of the asset",
          "type": "number"
        },
        "customerKey": {
          "description": "Reference to customer's private ID/name for the asset",
          "type": "string"
        },
        "contentType": {
          "description": "The type that the content attribute will be in",
          "type": "string"
        },
        "data": {
          "description": "Property bag containing the asset data",
          "type": "object"
        },
        "assetType": {
          "$ref": "#/definitions/AssetType"
        },
        "version": {
          "description": "The version of the asset",
          "type": "number"
        },
        "locked": {
          "description": "Specifies if the asset can be modified or not",
          "type": "boolean"
        },
        "fileProperties": {
          "description": "Stores the different properties that this asset refers to if it is a file type",
          "type": "object"
        },
        "name": {
          "description": "Name of the asset, set by the client",
          "type": "string"
        },
        "description": {
          "description": "Description of the asset, set by the client",
          "type": "string"
        },
        "category": {
          "description": "ID of the category the asset belongs to",
          "type": "object"
        },
        "tags": {
          "description": "List of tags associated with the asset",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "description": "The actual content of the asset",
          "type": "string"
        },
        "design": {
          "description": "Fallback for display when neither content nor supercontent are provided",
          "type": "string"
        },
        "superContent": {
          "description": "Content that supersedes content in terms of display",
          "type": "string"
        },
        "customFields": {
          "description": "Custom fields within an asset",
          "type": "object"
        },
        "views": {
          "description": "Views within an asset",
          "type": "object"
        },
        "blocks": {
          "description": "Blocks within the asset",
          "type": "object"
        },
        "minBlocks": {
          "description": "Minimum number of blocks within an asset",
          "type": "number"
        },
        "maxBlocks": {
          "description": "Maximum number of blocks within an asset",
          "type": "number"
        },
        "channels": {
          "description": "List of channels that are allowed to use this asset",
          "type": "object"
        },
        "allowedBlocks": {
          "description": "List of blocks that are allowed in the asset",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slots": {
          "description": "Slots within the asset",
          "type": "object"
        },
        "businessUnitAvailability": {
          "description": "A dictionary of member IDs that have been granted access to the asset",
          "type": "object"
        },
        "sharingProperties": {
          "$ref": "#/definitions/SharingProperties"
        },
        "template": {
          "description": "Template the asset follows",
          "type": "object"
        },
        "file": {
          "description": "Base64-encoded string of a file associated with an asset",
          "type": "string"
        },
        "generateFrom": {
          "description": "Tells the sending compiler what view to use for generating this view's content",
          "type": "string"
        }
      }
    },
    "Campaign": {
      "type": "object",
      "required": [
        "name",
        "description",
        "campaignCode",
        "color",
        "favorite"
      ],
      "properties": {
        "name": {
          "description": "Name of the campaign with a maximum length of 128 characters",
          "type": "string",
          "maxLength": 128
        },
        "description": {
          "description": "Description of the campaign with a maximum length of 512 characters",
          "type": "string",
          "maxLength": 512
        },
        "campaignCode": {
          "description": "Unique identifier for the campaign with a maximum length of 36 characters",
          "type": "string",
          "maxLength": 36
        },
        "color": {
          "description": "Hex color value",
          "type": "string"
        },
        "favorite": {
          "description": "Determines if the campaign will be flagged as a favorite",
          "type": "boolean"
        },
        "id": {
          "description": "The id of the campaign",
          "type": "number"
        },
        "createdDate": {
          "description": "The date the object was created.",
          "type": "string",
          "format":"date-time",
          "readOnly":true
        },
        "modifiedDate": {
          "description": "The date the object was modified.",
          "type": "string",
          "format":"date-time",
          "readOnly":true
        }
      }
    },
    "EmailDefinition": {
      "type": "object",
      "required": [
        "definitionKey",
        "name",
        "content",
        "subscriptions"
      ],
      "properties": {
        "requestId":{
          "description": "The ID of the request",
          "type": "string",
          "readOnly":true
        },
        "definitionKey": {
          "description": "Unique, user-generated key to access the definition object.",
          "type": "string"
        },
        "name": {
          "description": "Name of the definition. Must be unique.",
          "type": "string"
        },
        "content":{
          "$ref": "#/definitions/Content"
        },
        "subscriptions":{
          "$ref": "#/definitions/Subscriptions"
        },
        "status": {
          "description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
          "type": "string"
        },
        "description": {
          "description": "User-provided description of the send definition.",
          "type": "string"
        },
        "classification": {
          "description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration. Only transactional classifications are permitted. Default is default transactional.",
          "type": "string"
        },
        "options":{
          "$ref": "#/definitions/Options"
        },
        "createdDate": {
          "description": "The date the object was created.",
          "type": "string",
          "format":"date-time",
          "readOnly":true
        },
        "modifiedDate": {
          "description": "The date the object was modified.",
          "type": "string",
          "format":"date-time",
          "readOnly":true
        }
      }
    },
    "EmailDefinitionsResponse":{
      "type": "object",
      "properties":{
        "requestId":{
          "description": "The ID of the request",
          "type": "string"
        },
        "definitions":{
          "type": "array",
          "items": {
                "$ref": "#/definitions/EmailDefinition"
            }
        },
        "count":{
          "description": "Number of pages",
          "type": "number"
        },
        "page":{
          "description": "Page number to return.",
          "type": "number"
        },
        "pageSize":{
          "description": "Number of definitions, which are array elements, to return per paged response.",
          "type": "number"
        }
      }
    },
    "Content": {
      "type": "object",
      "required": [
        "customerKey"
      ],
      "properties": {
        "customerKey": {
          "description": "Unique identifier of the content asset.",
          "type": "string"
        }
      }
    },
    "Subscriptions":{
      "type": "object",
      "required": [
        "list"
      ],
      "properties": {
        "list": {
          "description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
          "type": "string"
        },
        "dataExtension": {
          "description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.",
          "type": "string"
        },
        "autoAddSubscriber": {
          "description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
          "type": "boolean"
        },
        "updateSubscriber": {
          "description": "Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
          "type": "boolean"
        }
      }
    },
    "Options":{
      "type": "object",
      "properties":{
        "trackLinks": {
          "description": "Wraps links for tracking and reporting. Default is true.",
          "type": "boolean"
        }
      }
    },
    "SuccessfulEmailDefinitionDelete":{
      "type": "object",
      "properties":{
        "message":{
          "description": "The response message",
          "type": "string"
        },
        "requestId":{
          "description": "The ID of the request",
          "type": "string"
        },
        "deletedDefinitionKey":{
          "description": "The key of the deleted definition",
          "type": "string"
        }
      }
    },
    "EmailDefinitionDescription":{
      "type": "object",
      "properties":{
        "description":{
          "description": "The email definition description",
          "type": "string"
        }
      }
    },
    "SharingProperties": {
       "type": "object",
       "properties": {
          "sharingType": {
            "description": "Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.",
            "type": "string",
            "enum": ["view", "edit", "local"]
          },
          "sharedWith": {
            "description": "List of MID IDs the asset is shared with",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "maxItems": 100
        }
       }
    }
  }
}